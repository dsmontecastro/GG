[gd_scene load_steps=13 format=3]

[ext_resource type="Script" path="res://scenes/Game/Units/Scripts/Track.gd" id="1"]
[ext_resource type="TileSet" path="res://scenes/Game/Board/Assets/Tiles.tres" id="2"]
[ext_resource type="PackedScene" path="res://scenes/Game/Units/Scenes/Unit.tscn" id="3"]
[ext_resource type="Texture2D" uid="uid://bka032lud55f5" path="res://scenes/Game/Board/Assets/Edge.png" id="4"]
[ext_resource type="Texture2D" uid="uid://bxx7j2xvabsa5" path="res://scenes/Game/Board/Assets/Corner.png" id="5"]
[ext_resource type="Texture2D" uid="uid://dael8fvpoijeb" path="res://scenes/Game/Board/Assets/Cell.png" id="6"]
[ext_resource type="Texture2D" uid="uid://cjrkan1uqwpxw" path="res://scenes/Game/Board/Assets/Blank.png" id="7"]
[ext_resource type="Script" path="res://scenes/Game/Sidebar/Scripts/Tracker.gd" id="8"]

[sub_resource type="ConvexPolygonShape2D" id=3]
points = PackedVector2Array( 60, 60, 0, 60, 0, 0, 60, 0 )

[sub_resource type="TileSet" id=4]
resource_local_to_scene = true
0/name = "Cell.png 0"
0/texture = ExtResource( 6 )
0/tex_offset = Vector2( 0, 0 )
0/modulate = Color( 1, 1, 1, 1 )
0/region = Rect2( 0, 0, 60, 60 )
0/tile_mode = 0
0/occluder_offset = Vector2( 0, 0 )
0/navigation_offset = Vector2( 0, 0 )
0/shape_offset = Vector2( 0, 0 )
0/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
0/shape = SubResource( 3 )
0/shape_one_way = false
0/shape_one_way_margin = 1.0
0/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 3 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
0/z_index = 0
2/name = "Edge.png 2"
2/texture = ExtResource( 4 )
2/tex_offset = Vector2( 0, 0 )
2/modulate = Color( 1, 1, 1, 1 )
2/region = Rect2( 0, 0, 60, 60 )
2/tile_mode = 0
2/occluder_offset = Vector2( 0, 0 )
2/navigation_offset = Vector2( 0, 0 )
2/shape_offset = Vector2( 0, 0 )
2/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
2/shape_one_way = false
2/shape_one_way_margin = 0.0
2/shapes = [  ]
2/z_index = 0
3/name = "Corner.png 3"
3/texture = ExtResource( 5 )
3/tex_offset = Vector2( 0, 0 )
3/modulate = Color( 1, 1, 1, 1 )
3/region = Rect2( 0, 0, 60, 60 )
3/tile_mode = 0
3/occluder_offset = Vector2( 0, 0 )
3/navigation_offset = Vector2( 0, 0 )
3/shape_offset = Vector2( 0, 0 )
3/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
3/shape_one_way = false
3/shape_one_way_margin = 0.0
3/shapes = [  ]
3/z_index = 0
4/name = "Blank.png 4"
4/texture = ExtResource( 7 )
4/tex_offset = Vector2( 0, 0 )
4/modulate = Color( 1, 1, 1, 1 )
4/region = Rect2( 0, 0, 60, 60 )
4/tile_mode = 0
4/occluder_offset = Vector2( 0, 0 )
4/navigation_offset = Vector2( 0, 0 )
4/shape_offset = Vector2( 0, 0 )
4/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
4/shape_one_way = false
4/shape_one_way_margin = 0.0
4/shapes = [  ]
4/z_index = 0

[sub_resource type="Shader" id=5]
resource_local_to_scene = true
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=6]
resource_local_to_scene = true
shader = SubResource( 5 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.0
shader_param/scanlines_width = 0.0
shader_param/grille_opacity = 0.0
shader_param/resolution = Vector2( 2000, 2000 )
shader_param/pixelate = false
shader_param/roll = true
shader_param/roll_speed = 100.0
shader_param/roll_size = 100.0
shader_param/roll_variation = 5.0
shader_param/distort_intensity = 0.1
shader_param/noise_opacity = 0.0
shader_param/noise_speed = 0.0
shader_param/static_noise_intensity = 0.0
shader_param/aberration = 0.015
shader_param/brightness = 1.0
shader_param/discolor = false
shader_param/warp_amount = 0.0
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.0
shader_param/vignette_opacity = 0.0

[node name="Tracker" type="Area2D"]
script = ExtResource( 8 )
__meta__ = {
"_edit_lock_": true
}

[node name="Tiles" type="TileMap" parent="."]
rotation = -6.28319
tile_set = ExtResource( 2 )
cell_size = Vector2( 60, 60 )
collision_use_parent = true
format = 1
tile_data = PackedInt32Array( 0, 0, 0, 1, 0, 0, 2, 0, 0, 65536, 0, 0, 65537, 0, 0, 65538, 0, 0, 131072, 0, 0, 131073, 0, 0, 131074, 0, 0, 196608, 0, 0, 196609, 0, 0, 196610, 0, 0, 262144, 0, 0, 262145, 0, 0, 262146, 0, 0, 327680, 0, 0, 327681, 0, 0, 327682, 0, 0 )
__meta__ = {
"_edit_lock_": true
}

[node name="Flag" parent="Tiles" instance=ExtResource( 3 )]
position = Vector2( 29.9999, 30.0001 )
script = ExtResource( 1 )

[node name="Moves" parent="Tiles/Flag" index="0"]
tile_set = SubResource( 4 )

[node name="Anim" parent="Tiles/Flag" index="2"]
animation = "01B"

[node name="Filters" parent="Tiles/Flag" index="3"]
__meta__ = {
"_edit_lock_": true
}

[node name="Glitch" parent="Tiles/Flag/Filters" index="0"]
material = SubResource( 6 )

[node name="Count" type="Label" parent="Tiles/Flag"]
offset_left = 12.9999
offset_top = 14.0001
offset_right = 27.9999
offset_bottom = 28.0001
text = "x1"
align = 1
valign = 1

[node name="Private" parent="Tiles" instance=ExtResource( 3 )]
position = Vector2( 30, 150 )
script = ExtResource( 1 )
MAX = 6

[node name="Moves" parent="Tiles/Private" index="0"]
tile_set = SubResource( 4 )

[node name="Anim" parent="Tiles/Private" index="2"]
animation = "02A"

[node name="Filters" parent="Tiles/Private" index="3"]
__meta__ = {
"_edit_lock_": true
}

[node name="Glitch" parent="Tiles/Private/Filters" index="0"]
material = SubResource( 6 )

[node name="Count" type="Label" parent="Tiles/Private"]
offset_left = 12.9993
offset_top = 14.0002
offset_right = 27.9993
offset_bottom = 28.0002
text = "x6"
align = 1
valign = 1

[node name="Sergeant" parent="Tiles" instance=ExtResource( 3 )]
position = Vector2( 30, 270 )
script = ExtResource( 1 )

[node name="Moves" parent="Tiles/Sergeant" index="0"]
tile_set = SubResource( 4 )

[node name="Anim" parent="Tiles/Sergeant" index="2"]
animation = "03A"

[node name="Filters" parent="Tiles/Sergeant" index="3"]
__meta__ = {
"_edit_lock_": true
}

[node name="Glitch" parent="Tiles/Sergeant/Filters" index="0"]
material = SubResource( 6 )

[node name="Count" type="Label" parent="Tiles/Sergeant"]
offset_left = 12.9993
offset_top = 14.0002
offset_right = 27.9993
offset_bottom = 28.0002
text = "x1"
align = 1
valign = 1

[node name="1st Lieutenant" parent="Tiles" instance=ExtResource( 3 )]
position = Vector2( 90, 30 )
script = ExtResource( 1 )

[node name="Moves" parent="Tiles/1st Lieutenant" index="0"]
tile_set = SubResource( 4 )

[node name="Anim" parent="Tiles/1st Lieutenant" index="2"]
animation = "04A"

[node name="Filters" parent="Tiles/1st Lieutenant" index="3"]
__meta__ = {
"_edit_lock_": true
}

[node name="Glitch" parent="Tiles/1st Lieutenant/Filters" index="0"]
material = SubResource( 6 )

[node name="Count" type="Label" parent="Tiles/1st Lieutenant"]
offset_left = 12.9993
offset_top = 14.0002
offset_right = 27.9993
offset_bottom = 28.0002
text = "x1"
align = 1
valign = 1

[node name="2nd Lieutenant" parent="Tiles" instance=ExtResource( 3 )]
position = Vector2( 90, 90 )
script = ExtResource( 1 )

[node name="Moves" parent="Tiles/2nd Lieutenant" index="0"]
tile_set = SubResource( 4 )

[node name="Anim" parent="Tiles/2nd Lieutenant" index="2"]
animation = "05A"

[node name="Filters" parent="Tiles/2nd Lieutenant" index="3"]
__meta__ = {
"_edit_lock_": true
}

[node name="Glitch" parent="Tiles/2nd Lieutenant/Filters" index="0"]
material = SubResource( 6 )

[node name="Count" type="Label" parent="Tiles/2nd Lieutenant"]
offset_left = 12.9993
offset_top = 14.0002
offset_right = 27.9993
offset_bottom = 28.0002
text = "x1"
align = 1
valign = 1

[node name="Captain" parent="Tiles" instance=ExtResource( 3 )]
position = Vector2( 90, 150 )
script = ExtResource( 1 )

[node name="Moves" parent="Tiles/Captain" index="0"]
tile_set = SubResource( 4 )

[node name="Anim" parent="Tiles/Captain" index="2"]
animation = "06A"

[node name="Filters" parent="Tiles/Captain" index="3"]
__meta__ = {
"_edit_lock_": true
}

[node name="Glitch" parent="Tiles/Captain/Filters" index="0"]
material = SubResource( 6 )

[node name="Count" type="Label" parent="Tiles/Captain"]
offset_left = 12.9993
offset_top = 14.0002
offset_right = 27.9993
offset_bottom = 28.0002
text = "x1"
align = 1
valign = 1

[node name="Major" parent="Tiles" instance=ExtResource( 3 )]
position = Vector2( 90, 210 )
script = ExtResource( 1 )

[node name="Moves" parent="Tiles/Major" index="0"]
tile_set = SubResource( 4 )

[node name="Anim" parent="Tiles/Major" index="2"]
animation = "07A"

[node name="Filters" parent="Tiles/Major" index="3"]
__meta__ = {
"_edit_lock_": true
}

[node name="Glitch" parent="Tiles/Major/Filters" index="0"]
material = SubResource( 6 )

[node name="Count" type="Label" parent="Tiles/Major"]
offset_left = 12.9993
offset_top = 14.0002
offset_right = 27.9993
offset_bottom = 28.0002
text = "x1"
align = 1
valign = 1

[node name="Lt Colonel" parent="Tiles" instance=ExtResource( 3 )]
position = Vector2( 90, 270 )
script = ExtResource( 1 )

[node name="Moves" parent="Tiles/Lt Colonel" index="0"]
tile_set = SubResource( 4 )

[node name="Anim" parent="Tiles/Lt Colonel" index="2"]
animation = "08A"

[node name="Filters" parent="Tiles/Lt Colonel" index="3"]
__meta__ = {
"_edit_lock_": true
}

[node name="Glitch" parent="Tiles/Lt Colonel/Filters" index="0"]
material = SubResource( 6 )

[node name="Count" type="Label" parent="Tiles/Lt Colonel"]
offset_left = 12.9993
offset_top = 14.0002
offset_right = 27.9993
offset_bottom = 28.0002
text = "x1"
align = 1
valign = 1

[node name="Colonel" parent="Tiles" instance=ExtResource( 3 )]
position = Vector2( 90, 330 )
script = ExtResource( 1 )

[node name="Moves" parent="Tiles/Colonel" index="0"]
tile_set = SubResource( 4 )

[node name="Anim" parent="Tiles/Colonel" index="2"]
animation = "09A"

[node name="Filters" parent="Tiles/Colonel" index="3"]
__meta__ = {
"_edit_lock_": true
}

[node name="Glitch" parent="Tiles/Colonel/Filters" index="0"]
material = SubResource( 6 )

[node name="Count" type="Label" parent="Tiles/Colonel"]
offset_left = 12.9993
offset_top = 14.0002
offset_right = 27.9993
offset_bottom = 28.0002
text = "x1"
align = 1
valign = 1

[node name="1* General" parent="Tiles" instance=ExtResource( 3 )]
position = Vector2( 150, 30 )
script = ExtResource( 1 )

[node name="Moves" parent="Tiles/1* General" index="0"]
tile_set = SubResource( 4 )

[node name="Anim" parent="Tiles/1* General" index="2"]
animation = "10A"

[node name="Filters" parent="Tiles/1* General" index="3"]
__meta__ = {
"_edit_lock_": true
}

[node name="Glitch" parent="Tiles/1* General/Filters" index="0"]
material = SubResource( 6 )

[node name="Count" type="Label" parent="Tiles/1* General"]
offset_left = 12.9993
offset_top = 14.0002
offset_right = 27.9993
offset_bottom = 28.0002
text = "x1"
align = 1
valign = 1

[node name="2* General" parent="Tiles" instance=ExtResource( 3 )]
position = Vector2( 150, 90 )
script = ExtResource( 1 )

[node name="Moves" parent="Tiles/2* General" index="0"]
tile_set = SubResource( 4 )

[node name="Anim" parent="Tiles/2* General" index="2"]
animation = "11A"

[node name="Filters" parent="Tiles/2* General" index="3"]
__meta__ = {
"_edit_lock_": true
}

[node name="Glitch" parent="Tiles/2* General/Filters" index="0"]
material = SubResource( 6 )

[node name="Count" type="Label" parent="Tiles/2* General"]
offset_left = 12.9993
offset_top = 14.0002
offset_right = 27.9993
offset_bottom = 28.0002
text = "x1"
align = 1
valign = 1

[node name="3* General" parent="Tiles" instance=ExtResource( 3 )]
position = Vector2( 149.999, 150.001 )
script = ExtResource( 1 )

[node name="Moves" parent="Tiles/3* General" index="0"]
tile_set = SubResource( 4 )

[node name="Anim" parent="Tiles/3* General" index="2"]
animation = "12A"

[node name="Filters" parent="Tiles/3* General" index="3"]
__meta__ = {
"_edit_lock_": true
}

[node name="Glitch" parent="Tiles/3* General/Filters" index="0"]
material = SubResource( 6 )

[node name="Count" type="Label" parent="Tiles/3* General"]
offset_left = 12.9993
offset_top = 14.0002
offset_right = 27.9993
offset_bottom = 28.0002
text = "x1"
align = 1
valign = 1

[node name="4* General" parent="Tiles" instance=ExtResource( 3 )]
position = Vector2( 150, 210 )
script = ExtResource( 1 )

[node name="Moves" parent="Tiles/4* General" index="0"]
tile_set = SubResource( 4 )

[node name="Anim" parent="Tiles/4* General" index="2"]
animation = "13A"

[node name="Filters" parent="Tiles/4* General" index="3"]
__meta__ = {
"_edit_lock_": true
}

[node name="Glitch" parent="Tiles/4* General/Filters" index="0"]
material = SubResource( 6 )

[node name="Count" type="Label" parent="Tiles/4* General"]
offset_left = 12.9993
offset_top = 14.0002
offset_right = 27.9993
offset_bottom = 28.0002
text = "x1"
align = 1
valign = 1

[node name="5* General" parent="Tiles" instance=ExtResource( 3 )]
position = Vector2( 150, 270 )
script = ExtResource( 1 )

[node name="Moves" parent="Tiles/5* General" index="0"]
tile_set = SubResource( 4 )

[node name="Anim" parent="Tiles/5* General" index="2"]
animation = "14A"

[node name="Filters" parent="Tiles/5* General" index="3"]
__meta__ = {
"_edit_lock_": true
}

[node name="Glitch" parent="Tiles/5* General/Filters" index="0"]
material = SubResource( 6 )

[node name="Count" type="Label" parent="Tiles/5* General"]
offset_left = 12.9993
offset_top = 14.0002
offset_right = 27.9993
offset_bottom = 28.0002
text = "x1"
align = 1
valign = 1

[node name="Agent" parent="Tiles" instance=ExtResource( 3 )]
position = Vector2( 150, 330 )
script = ExtResource( 1 )
MAX = 2

[node name="Moves" parent="Tiles/Agent" index="0"]
tile_set = SubResource( 4 )

[node name="Anim" parent="Tiles/Agent" index="2"]
animation = "15A"

[node name="Filters" parent="Tiles/Agent" index="3"]
__meta__ = {
"_edit_lock_": true
}

[node name="Glitch" parent="Tiles/Agent/Filters" index="0"]
material = SubResource( 6 )

[node name="Count" type="Label" parent="Tiles/Agent"]
offset_left = 12.9993
offset_top = 14.0002
offset_right = 27.9993
offset_bottom = 28.0002
text = "x2"
align = 1
valign = 1

[editable path="Tiles/Flag"]
[editable path="Tiles/Private"]
[editable path="Tiles/Sergeant"]
[editable path="Tiles/1st Lieutenant"]
[editable path="Tiles/2nd Lieutenant"]
[editable path="Tiles/Captain"]
[editable path="Tiles/Major"]
[editable path="Tiles/Lt Colonel"]
[editable path="Tiles/Colonel"]
[editable path="Tiles/1* General"]
[editable path="Tiles/2* General"]
[editable path="Tiles/3* General"]
[editable path="Tiles/4* General"]
[editable path="Tiles/5* General"]
[editable path="Tiles/Agent"]
